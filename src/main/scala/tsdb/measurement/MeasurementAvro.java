/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tsdb.measurement;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

/** Measurements */
@org.apache.avro.specific.AvroGenerated
public class MeasurementAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7106501064926296231L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MeasurementAvro\",\"namespace\":\"tsdb.measurement\",\"doc\":\"Measurements\",\"fields\":[{\"name\":\"metric\",\"type\":\"string\",\"doc\":\"Metric of measurement (high level grouping of measurements)\"},{\"name\":\"tags\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"Measurement tags\"},{\"name\":\"logtime\",\"type\":\"long\",\"doc\":\"Time when measurement was created\"},{\"name\":\"value\",\"type\":\"long\",\"doc\":\"Measured value\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MeasurementAvro> ENCODER =
      new BinaryMessageEncoder<MeasurementAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MeasurementAvro> DECODER =
      new BinaryMessageDecoder<MeasurementAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MeasurementAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MeasurementAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MeasurementAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MeasurementAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MeasurementAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MeasurementAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MeasurementAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MeasurementAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Metric of measurement (high level grouping of measurements) */
   private java.lang.CharSequence metric;
  /** Measurement tags */
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;
  /** Time when measurement was created */
   private long logtime;
  /** Measured value */
   private long value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MeasurementAvro() {}

  /**
   * All-args constructor.
   * @param metric Metric of measurement (high level grouping of measurements)
   * @param tags Measurement tags
   * @param logtime Time when measurement was created
   * @param value Measured value
   */
  public MeasurementAvro(java.lang.CharSequence metric, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags, java.lang.Long logtime, java.lang.Long value) {
    this.metric = metric;
    this.tags = tags;
    this.logtime = logtime;
    this.value = value;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return metric;
    case 1: return tags;
    case 2: return logtime;
    case 3: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: metric = (java.lang.CharSequence)value$; break;
    case 1: tags = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 2: logtime = (java.lang.Long)value$; break;
    case 3: value = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'metric' field.
   * @return Metric of measurement (high level grouping of measurements)
   */
  public java.lang.CharSequence getMetric() {
    return metric;
  }


  /**
   * Sets the value of the 'metric' field.
   * Metric of measurement (high level grouping of measurements)
   * @param value the value to set.
   */
  public void setMetric(java.lang.CharSequence value) {
    this.metric = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return Measurement tags
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
    return tags;
  }


  /**
   * Sets the value of the 'tags' field.
   * Measurement tags
   * @param value the value to set.
   */
  public void setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'logtime' field.
   * @return Time when measurement was created
   */
  public long getLogtime() {
    return logtime;
  }


  /**
   * Sets the value of the 'logtime' field.
   * Time when measurement was created
   * @param value the value to set.
   */
  public void setLogtime(long value) {
    this.logtime = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Measured value
   */
  public long getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * Measured value
   * @param value the value to set.
   */
  public void setValue(long value) {
    this.value = value;
  }

  /**
   * Creates a new MeasurementAvro RecordBuilder.
   * @return A new MeasurementAvro RecordBuilder
   */
  public static tsdb.measurement.MeasurementAvro.Builder newBuilder() {
    return new tsdb.measurement.MeasurementAvro.Builder();
  }

  /**
   * Creates a new MeasurementAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MeasurementAvro RecordBuilder
   */
  public static tsdb.measurement.MeasurementAvro.Builder newBuilder(tsdb.measurement.MeasurementAvro.Builder other) {
    if (other == null) {
      return new tsdb.measurement.MeasurementAvro.Builder();
    } else {
      return new tsdb.measurement.MeasurementAvro.Builder(other);
    }
  }

  /**
   * Creates a new MeasurementAvro RecordBuilder by copying an existing MeasurementAvro instance.
   * @param other The existing instance to copy.
   * @return A new MeasurementAvro RecordBuilder
   */
  public static tsdb.measurement.MeasurementAvro.Builder newBuilder(tsdb.measurement.MeasurementAvro other) {
    if (other == null) {
      return new tsdb.measurement.MeasurementAvro.Builder();
    } else {
      return new tsdb.measurement.MeasurementAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for MeasurementAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MeasurementAvro>
    implements org.apache.avro.data.RecordBuilder<MeasurementAvro> {

    /** Metric of measurement (high level grouping of measurements) */
    private java.lang.CharSequence metric;
    /** Measurement tags */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;
    /** Time when measurement was created */
    private long logtime;
    /** Measured value */
    private long value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tsdb.measurement.MeasurementAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.metric)) {
        this.metric = data().deepCopy(fields()[0].schema(), other.metric);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.tags)) {
        this.tags = data().deepCopy(fields()[1].schema(), other.tags);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.logtime)) {
        this.logtime = data().deepCopy(fields()[2].schema(), other.logtime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing MeasurementAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(tsdb.measurement.MeasurementAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.metric)) {
        this.metric = data().deepCopy(fields()[0].schema(), other.metric);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tags)) {
        this.tags = data().deepCopy(fields()[1].schema(), other.tags);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.logtime)) {
        this.logtime = data().deepCopy(fields()[2].schema(), other.logtime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'metric' field.
      * Metric of measurement (high level grouping of measurements)
      * @return The value.
      */
    public java.lang.CharSequence getMetric() {
      return metric;
    }


    /**
      * Sets the value of the 'metric' field.
      * Metric of measurement (high level grouping of measurements)
      * @param value The value of 'metric'.
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder setMetric(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.metric = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'metric' field has been set.
      * Metric of measurement (high level grouping of measurements)
      * @return True if the 'metric' field has been set, false otherwise.
      */
    public boolean hasMetric() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'metric' field.
      * Metric of measurement (high level grouping of measurements)
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder clearMetric() {
      metric = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * Measurement tags
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
      return tags;
    }


    /**
      * Sets the value of the 'tags' field.
      * Measurement tags
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.tags = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * Measurement tags
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tags' field.
      * Measurement tags
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder clearTags() {
      tags = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'logtime' field.
      * Time when measurement was created
      * @return The value.
      */
    public long getLogtime() {
      return logtime;
    }


    /**
      * Sets the value of the 'logtime' field.
      * Time when measurement was created
      * @param value The value of 'logtime'.
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder setLogtime(long value) {
      validate(fields()[2], value);
      this.logtime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'logtime' field has been set.
      * Time when measurement was created
      * @return True if the 'logtime' field has been set, false otherwise.
      */
    public boolean hasLogtime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'logtime' field.
      * Time when measurement was created
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder clearLogtime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Measured value
      * @return The value.
      */
    public long getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * Measured value
      * @param value The value of 'value'.
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder setValue(long value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Measured value
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * Measured value
      * @return This builder.
      */
    public tsdb.measurement.MeasurementAvro.Builder clearValue() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MeasurementAvro build() {
      try {
        MeasurementAvro record = new MeasurementAvro();
        record.metric = fieldSetFlags()[0] ? this.metric : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tags = fieldSetFlags()[1] ? this.tags : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[1]);
        record.logtime = fieldSetFlags()[2] ? this.logtime : (java.lang.Long) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MeasurementAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<MeasurementAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MeasurementAvro>
    READER$ = (org.apache.avro.io.DatumReader<MeasurementAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.metric);

    long size0 = this.tags.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.tags.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeLong(this.logtime);

    out.writeLong(this.value);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.metric = in.readString(this.metric instanceof Utf8 ? (Utf8)this.metric : null);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.tags; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.tags = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

      this.logtime = in.readLong();

      this.value = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.metric = in.readString(this.metric instanceof Utf8 ? (Utf8)this.metric : null);
          break;

        case 1:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.tags; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.tags = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        case 2:
          this.logtime = in.readLong();
          break;

        case 3:
          this.value = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










